@use "variables" as variables;
@use "public-util" as utilities;

// main overwrite to make it all work
@function get-color-from-palette($palette, $hue: default, $opacity: null) {

  @if type-of($hue) == number and $hue >= 0 and $hue <= 1 {
    @return get-color-from-palette($palette, default, $hue);
  }

  @return map-get($palette, $hue);
}

// apply additional overwrites
@mixin other-overwrites {
  @include _mat-date-picker-content-overwrites();
  @include _mat-checkbox-overwrites();
  @include _mat-slide-toggle-color-overwrites();
}

// Fix issue with date picker contrast and hover colors
// Account for primary, accent, and warn palettes.
@mixin _mat-date-picker-content-overwrites {
  .mat-datepicker-content {
    $accent: variables.$palette-accent;
    $primary: variables.$palette-primary;
    $warn: variables.$palette-warn;
    @include _mat-date-picker-color-overwrites($primary, 500);

    &.mat-accent {
      @include _mat-date-picker-color-overwrites($accent, 500);
    }

    &.mat-warn {
      @include _mat-date-picker-color-overwrites($warn, 500);
    }
  }
}

@mixin _mat-date-picker-color-overwrites($palette, $hue) {
  .mat-calendar-body-in-range::before {
    background: get-color-from-palette($palette, $hue, 0.2);
    @include utilities.mat-css-dark-theme-global() {
      background: get-color-from-palette($palette, $hue, 0.2);
    }
  }
  .mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover,
  .cdk-keyboard-focused .mat-calendar-body-active,
  .cdk-program-focused .mat-calendar-body-active {
    & > .mat-calendar-body-cell-content {
      &:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical) {
        background-color: get-color-from-palette($palette, $hue, 0.3);
        @include utilities.mat-css-dark-theme-global() {
          background-color: get-color-from-palette($palette, $hue, 0.3);
        }
      }
    }
  }
}

// Fix a problem where the foreground color for the checkmark doesn't reflect
// the correct contrast color.
@mixin _mat-checkbox-overwrites {

  // -- Primary Color
  .mat-checkbox.mat-primary,
  .mat-checkbox.mat-primary {
    .mat-checkbox-checkmark .mat-checkbox-checkmark-path {
      stroke: utilities.mat-css-contrast-color-primary(500) !important;
    }

    .mat-checkbox-mixedmark {
      background-color: utilities.mat-css-contrast-color-primary(500) !important;
    }
  }
  // -- Accent Color
  .mat-checkbox.mat-accent,
  .mat-checkbox.mat-accent {
    .mat-checkbox-checkmark .mat-checkbox-checkmark-path {
      stroke: utilities.mat-css-contrast-color-accent(500) !important;
    }

    .mat-checkbox-mixedmark {
      background-color: utilities.mat-css-contrast-color-accent(500) !important;
    }
  }
  // -- Warning Color
  .mat-checkbox.mat-warn,
  .mat-checkbox.mat-warn {
    .mat-checkbox-checkmark .mat-checkbox-checkmark-path {
      stroke: utilities.mat-css-contrast-color-warn(500) !important;
    }

    .mat-checkbox-mixedmark {
      background-color: utilities.mat-css-contrast-color-warn(500) !important;
    }
  }
}

// Since we cannot override angulars namespace,
// target the style and overwrite it with the proper attributes.
@mixin _mat-slide-toggle-color-overwrites() {
  $thumb-checked-hue: 500;
  $accent: variables.$palette-accent;
  $primary: variables.$palette-primary;
  $warn: variables.$palette-warn;
  .mat-slide-toggle {
    @include _mat-slide-toggle-checked-color-theme($accent, $thumb-checked-hue);

    &.mat-primary {
      @include _mat-slide-toggle-checked-color-theme($primary, $thumb-checked-hue);
    }

    &.mat-warn {
      @include _mat-slide-toggle-checked-color-theme($warn, $thumb-checked-hue);
    }
  }
}

@mixin _mat-slide-toggle-checked-color-theme($palette, $thumb-checked-hue) {
  @include utilities.mat-css-dark-theme-global() {
    @include _mat-slide-toggle-checked-color($palette, $thumb-checked-hue)
  }
  @include utilities.mat-css-light-theme-global() {
    @include _mat-slide-toggle-checked-color($palette, $thumb-checked-hue)
  }
}

@mixin _mat-slide-toggle-checked-color($palette, $thumb-checked-hue) {
  &.mat-checked {
    .mat-slide-toggle-thumb {
      background-color: get-color-from-palette($palette, $thumb-checked-hue);
    }

    .mat-slide-toggle-bar {
      background-color: get-color-from-palette($palette, $thumb-checked-hue, 0.54);
    }

    .mat-ripple-element {
      background-color: get-color-from-palette($palette, $thumb-checked-hue);
    }
  }
}
